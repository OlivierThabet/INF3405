package server_package;

import java.io.*;
import java.net.*;
import java.util.*;

public class Server {
    private static final String USER_DB_FILE = "users.txt"; // Stockage des utilisateurs
    private static final String CHAT_HISTORY_FILE = "chat_history.txt"; // Historique des messages
    private static ServerSocket serverSocket;
    private static Map<String, String> users = new HashMap<>();
    private static List<String> messageHistory = new LinkedList<>();

    public static void main(String[] args) {
        try {
        	 Scanner scanner = new Scanner(System.in);
             String serverIP;
             int port;

             while (true) {
                 System.out.print("Entrez l'adresse IP du serveur: ");
                 serverIP = scanner.nextLine();

                 System.out.print("Entrez le port d'écoute (5000-5050): ");
                 try {
                     port = Integer.parseInt(scanner.nextLine());

                     if (isValidIPAddress(serverIP) && (port >= 5000 && port <= 5050)) {
                         break;  // ✅ IP et port valides, on continue
                     } else {
                         System.out.println("Erreur : Adresse IP ou port invalide. Essayez encore.");
                     }
                 } catch (NumberFormatException e) {
                     System.out.println("Erreur : Le port doit être un nombre entre 5000 et 5050. Essayez encore.");
                 }
             }
            loadUsers();
            loadChatHistory();
            serverSocket = new ServerSocket();
            serverSocket.setReuseAddress(true);
            serverSocket.bind(new InetSocketAddress(serverIP, port));
            System.out.println("Serveur en ligne sur " + serverIP + ":" + port);

            while (true) {
                Socket clientSocket = serverSocket.accept();
                new ClientHandler(clientSocket, users, messageHistory).start();
            }
        } catch (IOException e) {
            System.err.println("Erreur lors du démarrage du serveur : " + e.getMessage());
        }
    }
    private static boolean isValidIPAddress(String ip) {
        return ip.matches(
            "^((25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$"
        );
    }
    private static void loadUsers() {
        try (BufferedReader br = new BufferedReader(new FileReader(USER_DB_FILE))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 2) {
                    users.put(parts[0], parts[1]);
                }
            }
        } catch (IOException ignored) {
        }
    }

    private static void loadChatHistory() {
        try (BufferedReader br = new BufferedReader(new FileReader(CHAT_HISTORY_FILE))) {
            String line;
            while ((line = br.readLine()) != null) {
                messageHistory.add(line);
            }
        } catch (IOException ignored) {
        }
    }
}
