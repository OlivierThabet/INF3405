/**
 * Classe `Client` - Client d'un chat multi-utilisateurs
 * 
 * Cette classe impl√©mente un client permettant de se connecter √† un serveur de chat.
 * Elle permet √† l'utilisateur d'envoyer et de recevoir des messages en temps r√©el.
 * 
 
 * @auteurs: Olivier Thabet (2294559), Florence Giroux (2391006), Jad Chahbour (2256941)

 */


### **üìå Pourquoi cette ent√™te est utile ?**
‚úÖ **Clarifie le r√¥le du client et son fonctionnement.**  
‚úÖ **Explique le protocole d'authentification et de communication.**  
‚úÖ **Pr√©cise comment le client g√®re les messages en temps r√©el via un thread.**  
‚úÖ **Met en avant la gestion des erreurs et la fermeture propre des connexions.**  

üöÄ **Ajoute cette ent√™te au d√©but de `Client.java`, et ton code sera bien document√© !** üòä

package client_package;

import java.io.*;
import java.net.*;
import java.util.Scanner;

public class Client {
    public static void main(String[] args) {
        try {
        	//Demande √† l'utilisateur d'entrer l'adresse IP du serveur et le port.
            Scanner scanner = new Scanner(System.in);
            System.out.print("Entrez l'adresse IP du serveur: ");
            String serverIP = scanner.nextLine();
            System.out.print("Entrez le port (5000-5050): ");
            int port = scanner.nextInt();
            scanner.nextLine();
            
            //Demande √† l'utilisateur d'entrer son nom d'utiliseur + mot de passe ou de s'en cr√©er un.
            System.out.print("Nom d'utilisateur: ");
            String username = scanner.nextLine();
            System.out.print("Mot de passe: ");
            String password = scanner.nextLine();
            
            //√âtablie la connexion du client avec le server et permet au client d'envoyer du texte au serveur et vice-versa.
            Socket socket = new Socket(serverIP, port);
            DataOutputStream out = new DataOutputStream(socket.getOutputStream());
            DataInputStream in = new DataInputStream(socket.getInputStream());
            
            //Envoie le nom d'utilisateur et son mdp au server dans ClientHandler.
            out.writeUTF(username);
            out.writeUTF(password);
            
            //Affiche la r√©ponse du serveur apr√®s avoir re√ßu le username et mdp et l'avoir valid√© ou non.
            String response = in.readUTF();
            System.out.println("R√©ponse du serveur : " + response);
            
            if (response.equals("Erreur: Mot de passe incorrect")) {
                System.out.println("Connexion refus√©e.");
                scanner.close();
                socket.close();
                return;
            }
            //Si la connexion est r√©ussie, cr√©e un thread pour recevoir les messages du serveur de mani√®re non bloquante. 
            Thread receiveThread = new Thread(() -> {
                try {
                    while (true) {
                        String receivedMessage = in.readUTF();
                        
                        //Si le host ferme le serveur le client est d√©connect√©.
                        if (receivedMessage.equals("SERVER_CLOSED")) {
                            System.out.println("D√©connect√© du serveur.");
                            break;
                        }
                        System.out.println(receivedMessage);
                    }
                } catch (IOException e) {
                    System.out.println("Connexion perdue avec le serveur.");
                }
            });
            receiveThread.start();

            //Boucle d'√©criture et envoie de message au server.
            while (true) {
                String message = scanner.nextLine();
                
                //validation de la longueur du message.
                if (message.length() > 200) {
                    System.out.println("Erreur : Votre message d√©passe 200 caract√®res. Veuillez le raccourcir.");
                    continue;
                }
                //Si le message est `"exit" indique au server de d√©connecter l'utilisateur
                if (message.equalsIgnoreCase("exit")) {
                    out.writeUTF("exit");
                    System.out.println("D√©connexion...");
                    break;
                }
                //envoie de notre message au serveur.
                out.writeUTF(message);
            }

            scanner.close();
            in.close();
            out.close();
            socket.close();
            
            //Gestion d'erreurs inattendues des flux de donn√©es ou des connexions r√©seau.
        } catch (IOException e) {
            System.out.println("Erreur : " + e.getMessage());
        }
    }
}
